-- MySQL Script generated by MySQL Workbench
-- Fri May 26 12:45:23 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema bdmm_proyecto
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `bdmm_proyecto` ;

-- -----------------------------------------------------
-- Schema bdmm_proyecto
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bdmm_proyecto` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `bdmm_proyecto` ;

-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`usuario` (
  `Usuario_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria Tabla Usuario',
  `correo` VARCHAR(40) NOT NULL COMMENT 'Correo electrónico del usuario',
  `userPassword` VARCHAR(30) NOT NULL COMMENT 'Contraseña del usuario',
  `rolUsuario` TINYINT NOT NULL COMMENT 'No. que identifica el rol del usuario 1:Admin, 2:Instructor, 3:Alumno',
  `fotoPerfil` MEDIUMBLOB NULL DEFAULT NULL COMMENT 'Foto de perfil tipo avatar',
  `descripcion` TEXT NULL DEFAULT NULL,
  `nombre` VARCHAR(30) NOT NULL COMMENT 'Nombre completo del usuario',
  `apellidoMaterno` VARCHAR(30) NOT NULL COMMENT 'Apellido materno del usuario',
  `apellidoPaterno` VARCHAR(30) NOT NULL COMMENT 'Apellido paterno del usuario',
  `fechaNacimiento` DATE NOT NULL COMMENT 'Fecha de nacimiento del usuario',
  `sexo` VARCHAR(10) NOT NULL COMMENT 'Género del usuario',
  `fechaRegistro` DATETIME NOT NULL COMMENT 'Fecha en la que se dio de alta el usuario',
  `ultimoCambio` DATETIME NOT NULL COMMENT 'Fecha ultima de modificacion del usuario',
  `esBloqueado` BIT(1) NULL DEFAULT b'0' COMMENT 'Bandera que indica si esta bloqueado',
  PRIMARY KEY (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE UNIQUE INDEX `correo` ON `bdmm_proyecto`.`usuario` (`correo` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`categoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`categoria` (
  `Categoria_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de las categorias',
  `Usuario_id` INT NOT NULL COMMENT 'Clave Foránea del usuario que registro la categoria',
  `nombre` VARCHAR(30) NOT NULL COMMENT 'Nombre de la categoria',
  `descripcion` TINYTEXT NOT NULL COMMENT 'Descripcion de la categoria',
  `tiempoRegistro` DATETIME NOT NULL COMMENT 'Tiempo de registro de la categoria',
  PRIMARY KEY (`Categoria_id`),
  CONSTRAINT `FK_Categoria_Usuario`
    FOREIGN KEY (`Usuario_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_Categoria_Usuario` ON `bdmm_proyecto`.`categoria` (`Usuario_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`curso` (
  `Curso_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de los cursos',
  `Usuario_id` INT NOT NULL COMMENT 'Clave Foránea del usuario que registro el curso',
  `noNiveles` INT NOT NULL DEFAULT '0' COMMENT 'número de niveles del curso',
  `costoCurso` DECIMAL(9,2) UNSIGNED NOT NULL COMMENT 'Costo del curso',
  `noComentarios` INT NOT NULL DEFAULT '0' COMMENT 'numero de comentarios del curso',
  `noLikes` INT NOT NULL DEFAULT '0' COMMENT 'numero de reseñas buenas del curso',
  `noDislikes` INT NOT NULL DEFAULT '0' COMMENT 'numero de reseñas malas del curso',
  `imagenCurso` MEDIUMBLOB NOT NULL COMMENT 'Imagen del curso',
  `nombre` VARCHAR(50) NOT NULL COMMENT 'Nombre del curso',
  `descripcion` TEXT NOT NULL COMMENT 'Nombre de usuario',
  `isBaja` BIT(1) NULL DEFAULT b'0' COMMENT 'Bandera que indica si esta bloqueado',
  `isBorrador` BIT(1) NULL DEFAULT b'1' COMMENT 'Bandera para Borrador del Curso',
  PRIMARY KEY (`Curso_id`),
  CONSTRAINT `FK_Curso_Usuario`
    FOREIGN KEY (`Usuario_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 13
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_Curso_Usuario` ON `bdmm_proyecto`.`curso` (`Usuario_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`comentariocurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`comentariocurso` (
  `ComentarioCurso_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de los comentarios del curso(reseñas)',
  `Usuario_id` INT NOT NULL COMMENT 'Clave Foránea del usuario que registro el comentario del curso',
  `Curso_id` INT NOT NULL COMMENT 'Clave Foránea del curso que registro el comentario del curso',
  `isLike` BIT(1) NOT NULL COMMENT 'Bandera que indica si es una reseña positiva o negativa',
  `texto` TEXT NOT NULL COMMENT 'Texto sobre la reseña del curso',
  `tiempoRegistro` DATETIME NOT NULL COMMENT 'Tiempo de registro de la reseña',
  PRIMARY KEY (`ComentarioCurso_id`),
  CONSTRAINT `FK_ComentarioCurso_Curso`
    FOREIGN KEY (`Curso_id`)
    REFERENCES `bdmm_proyecto`.`curso` (`Curso_id`),
  CONSTRAINT `FK_ComentarioCurso_Usuario`
    FOREIGN KEY (`Usuario_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_ComentarioCurso_Usuario` ON `bdmm_proyecto`.`comentariocurso` (`Usuario_id` ASC) VISIBLE;

CREATE INDEX `FK_ComentarioCurso_Curso` ON `bdmm_proyecto`.`comentariocurso` (`Curso_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`cursocategoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`cursocategoria` (
  `CursoCategoria_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de las categorias de los cursos',
  `Curso_id` INT NOT NULL COMMENT 'Clave Foránea del curso',
  `Categoria_id` INT NOT NULL COMMENT 'Clave Foránea de la categoria',
  PRIMARY KEY (`CursoCategoria_id`),
  CONSTRAINT `FK_CursoCategoria_Categoria`
    FOREIGN KEY (`Categoria_id`)
    REFERENCES `bdmm_proyecto`.`categoria` (`Categoria_id`),
  CONSTRAINT `FK_CursoCategoria_Curso`
    FOREIGN KEY (`Curso_id`)
    REFERENCES `bdmm_proyecto`.`curso` (`Curso_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 13
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_CursoCategoria_Categoria` ON `bdmm_proyecto`.`cursocategoria` (`Categoria_id` ASC) VISIBLE;

CREATE INDEX `FK_CursoCategoria_Curso` ON `bdmm_proyecto`.`cursocategoria` (`Curso_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`mensaje`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`mensaje` (
  `Mensaje_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de los mensajes',
  `UsuarioInstructor_id` INT NOT NULL COMMENT 'Clave Foránea del usuario instructor del mensaje',
  `UsuarioAlumno_id` INT NOT NULL COMMENT 'Clave Foránea del usuario alumno del mensaje',
  `Curso_id` INT NOT NULL COMMENT 'Clave Foránea del curso del mensaje',
  `UltimoMensaje` DATETIME NOT NULL COMMENT 'Mi Tiempo ultimo mensaje',
  PRIMARY KEY (`Mensaje_id`),
  CONSTRAINT `FK_Mensaje_Curso`
    FOREIGN KEY (`Curso_id`)
    REFERENCES `bdmm_proyecto`.`curso` (`Curso_id`),
  CONSTRAINT `FK_Mensaje_UsuarioAlumno`
    FOREIGN KEY (`UsuarioAlumno_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`),
  CONSTRAINT `FK_Mensaje_UsuarioInstructor`
    FOREIGN KEY (`UsuarioInstructor_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_Mensaje_UsuarioInstructor` ON `bdmm_proyecto`.`mensaje` (`UsuarioInstructor_id` ASC) VISIBLE;

CREATE INDEX `FK_Mensaje_UsuarioAlumno` ON `bdmm_proyecto`.`mensaje` (`UsuarioAlumno_id` ASC) VISIBLE;

CREATE INDEX `FK_Mensaje_Curso` ON `bdmm_proyecto`.`mensaje` (`Curso_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`mensajedetalle`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`mensajedetalle` (
  `MensajeDetalle_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de los mensajes detalle',
  `Usuario_id` INT NOT NULL COMMENT 'Clave Foránea del usuario',
  `Mensaje_id` INT NOT NULL COMMENT 'Clave Foránea del mensaje',
  `texto` TINYTEXT NOT NULL COMMENT 'Texto sobre la reseña del curso',
  `tiempoRegistro` DATETIME NOT NULL COMMENT 'Tiempo de registro del mensaje',
  PRIMARY KEY (`MensajeDetalle_id`),
  CONSTRAINT `FK_MensajeDetalle_Mensaje_id`
    FOREIGN KEY (`Mensaje_id`)
    REFERENCES `bdmm_proyecto`.`mensaje` (`Mensaje_id`),
  CONSTRAINT `FK_MensajeDetalle_Usuario`
    FOREIGN KEY (`Usuario_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_MensajeDetalle_Usuario` ON `bdmm_proyecto`.`mensajedetalle` (`Usuario_id` ASC) VISIBLE;

CREATE INDEX `FK_MensajeDetalle_Mensaje_id` ON `bdmm_proyecto`.`mensajedetalle` (`Mensaje_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`metodopago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`metodopago` (
  `MetodoPago_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de los Metodos de pago',
  `nombreMetodo` VARCHAR(30) NOT NULL COMMENT 'Nombre del metodo de pago',
  `imagenMetodo` MEDIUMBLOB NOT NULL COMMENT 'Imagen del metodo de pago',
  PRIMARY KEY (`MetodoPago_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`nivel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`nivel` (
  `Nivel_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de los niveles',
  `Curso_id` INT NOT NULL COMMENT 'Clave Foránea del curso',
  `noNivel` INT NOT NULL COMMENT 'Numero del nivel',
  `nombre` VARCHAR(50) NOT NULL COMMENT 'Nombre del nivel',
  `costoNivel` DECIMAL(9,2) UNSIGNED NOT NULL COMMENT 'Costo del nivel',
  PRIMARY KEY (`Nivel_id`),
  CONSTRAINT `FK_Nivel_Curso`
    FOREIGN KEY (`Curso_id`)
    REFERENCES `bdmm_proyecto`.`curso` (`Curso_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 22
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_Nivel_Curso` ON `bdmm_proyecto`.`nivel` (`Curso_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`multimedia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`multimedia` (
  `Multimedia_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de la multimedia',
  `Nivel_id` INT NOT NULL COMMENT 'Clave Foránea del nivel',
  `multimedia` LONGBLOB NULL DEFAULT NULL COMMENT 'Multimedia',
  `texto` TEXT NULL DEFAULT NULL COMMENT 'Texto',
  `tipoMultimedia` TINYINT NOT NULL COMMENT 'No. que identifica el tipo de multimedia del nivel 1:imagen, 2:video, 3:PDF',
  PRIMARY KEY (`Multimedia_id`),
  CONSTRAINT `FK_Multimedia_Nivel`
    FOREIGN KEY (`Nivel_id`)
    REFERENCES `bdmm_proyecto`.`nivel` (`Nivel_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 28
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_Multimedia_Nivel` ON `bdmm_proyecto`.`multimedia` (`Nivel_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`usuariocurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`usuariocurso` (
  `usuarioCurso_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de usuarioCurso',
  `MetodoPago_id` INT NOT NULL COMMENT 'Clave Foránea del metodo de pago del usuario',
  `Curso_id` INT NOT NULL COMMENT 'Clave Foránea del curso',
  `Usuario_id` INT NOT NULL COMMENT 'Clave Foránea del usuario',
  `tiempoRegistro` DATETIME NOT NULL COMMENT 'Tiempo de registro del usuario al curso',
  `isFinalizado` BIT(1) NOT NULL DEFAULT b'0' COMMENT 'Bandera que indica si el usuario termino el curso',
  `nivelesCompletados` TINYINT NULL DEFAULT '0' COMMENT 'Cantidad de niveles completados del curso por el estudiante',
  `tiempoCompletado` DATETIME NULL DEFAULT NULL COMMENT 'Tiempo de finalización del usuario al curso',
  `costoCurso` DECIMAL(9,2) NULL DEFAULT NULL COMMENT 'Costo del curso en ese momento',
  PRIMARY KEY (`usuarioCurso_id`),
  CONSTRAINT `FK_usuarioCurso_Curso`
    FOREIGN KEY (`Curso_id`)
    REFERENCES `bdmm_proyecto`.`curso` (`Curso_id`),
  CONSTRAINT `FK_usuarioCurso_MetodoPago`
    FOREIGN KEY (`MetodoPago_id`)
    REFERENCES `bdmm_proyecto`.`metodopago` (`MetodoPago_id`),
  CONSTRAINT `FK_usuarioCurso_Usuario`
    FOREIGN KEY (`Usuario_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 26
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_usuarioCurso_MetodoPago` ON `bdmm_proyecto`.`usuariocurso` (`MetodoPago_id` ASC) VISIBLE;

CREATE INDEX `FK_usuarioCurso_Curso` ON `bdmm_proyecto`.`usuariocurso` (`Curso_id` ASC) VISIBLE;

CREATE INDEX `FK_usuarioCurso_Usuario` ON `bdmm_proyecto`.`usuariocurso` (`Usuario_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `bdmm_proyecto`.`nivelcurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`nivelcurso` (
  `nivelCurso_id` INT NOT NULL AUTO_INCREMENT COMMENT 'Clave Primaria de usuarioNivel',
  `MetodoPago_id` INT NOT NULL COMMENT 'Clave Foránea del metodo de pago del usuario',
  `usuarioCurso_id` INT NOT NULL COMMENT 'Clave Foránea del usuarioCurso',
  `Nivel_id` INT NOT NULL COMMENT 'Clave Foránea del nivel',
  `Usuario_id` INT NOT NULL COMMENT 'Clave Foránea del usuario',
  `tiempoRegistro` DATETIME NOT NULL COMMENT 'Tiempo de registro del usuario al curso',
  `isFinalizado` BIT(1) NOT NULL DEFAULT b'0' COMMENT 'Bandera que indica si el usuario termino el nivel',
  `tiempoCompletado` DATETIME NULL DEFAULT NULL COMMENT 'Tiempo de finalización del usuario al nivel',
  `costoNivel` DECIMAL(9,2) NULL DEFAULT NULL COMMENT 'Costo del nivel en ese momento',
  PRIMARY KEY (`nivelCurso_id`),
  CONSTRAINT `FK_nivelCurso_usuarioCurso`
    FOREIGN KEY (`usuarioCurso_id`)
    REFERENCES `bdmm_proyecto`.`usuariocurso` (`usuarioCurso_id`),
  CONSTRAINT `FK_PK_nivelCurso_MetodoPago`
    FOREIGN KEY (`MetodoPago_id`)
    REFERENCES `bdmm_proyecto`.`metodopago` (`MetodoPago_id`),
  CONSTRAINT `FK_PK_nivelCurso_Nivel`
    FOREIGN KEY (`Nivel_id`)
    REFERENCES `bdmm_proyecto`.`nivel` (`Nivel_id`),
  CONSTRAINT `FK_PK_nivelCurso_Usuario`
    FOREIGN KEY (`Usuario_id`)
    REFERENCES `bdmm_proyecto`.`usuario` (`Usuario_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 66
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `FK_PK_nivelCurso_MetodoPago` ON `bdmm_proyecto`.`nivelcurso` (`MetodoPago_id` ASC) VISIBLE;

CREATE INDEX `FK_PK_nivelCurso_Usuario` ON `bdmm_proyecto`.`nivelcurso` (`Usuario_id` ASC) VISIBLE;

CREATE INDEX `FK_PK_nivelCurso_Nivel` ON `bdmm_proyecto`.`nivelcurso` (`Nivel_id` ASC) VISIBLE;

CREATE INDEX `FK_nivelCurso_usuarioCurso` ON `bdmm_proyecto`.`nivelcurso` (`usuarioCurso_id` ASC) VISIBLE;

USE `bdmm_proyecto` ;

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vcategoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vcategoria` (`Categoria_id` INT, `Usuario_id` INT, `nombre` INT, `descripcion` INT, `tiempoRegistro` INT, `noCursos` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vcomentariocurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vcomentariocurso` (`nombreUsuario` INT, `fotoPerfil` INT, `ComentarioCurso_id` INT, `Usuario_id` INT, `Curso_id` INT, `isLike` INT, `texto` INT, `tiempoRegistro` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vcurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vcurso` (`Curso_id` INT, `Usuario_id` INT, `noNiveles` INT, `costoCurso` INT, `noComentarios` INT, `noLikes` INT, `noDislikes` INT, `imagenCurso` INT, `nombre` INT, `descripcion` INT, `isBaja` INT, `isBorrador` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vcursoinstructor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vcursoinstructor` (`Curso_id` INT, `isBorrador` INT, `Usuario_id` INT, `noNiveles` INT, `costoCurso` INT, `noComentarios` INT, `noLikes` INT, `noDislikes` INT, `imagenCurso` INT, `cursoNombre` INT, `descripcion` INT, `isBaja` INT, `CursoCategoria_id` INT, `categoriaNombre` INT, `Ingresos` INT, `Promedio` INT, `noAlumnos` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vcursosmasvendido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vcursosmasvendido` (`nombreCompleto` INT, `Curso_id` INT, `noNiveles` INT, `costoCurso` INT, `noComentarios` INT, `noLikes` INT, `noDislikes` INT, `imagenCurso` INT, `nombre` INT, `descripcion` INT, `isBaja` INT, `misCursosVendidos` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vcursosmejorcalificado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vcursosmejorcalificado` (`nombreCompleto` INT, `Curso_id` INT, `Usuario_id` INT, `noNiveles` INT, `costoCurso` INT, `noComentarios` INT, `noLikes` INT, `noDislikes` INT, `imagenCurso` INT, `nombre` INT, `descripcion` INT, `isBaja` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vdiploma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vdiploma` (`Usuario_id` INT, `Curso_id` INT, `Alumno` INT, `tiempoCompletado` INT, `Instructor` INT, `nombreCurso` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vkardex`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vkardex` (`Usuario_id` INT, `Curso_id` INT, `isFinalizado` INT, `isBaja` INT, `imagenCurso` INT, `isBorrador` INT, `nombreCurso` INT, `Progreso` INT, `ultimoNivel` INT, `nombreCategoria` INT, `tiempoCompletado` INT, `tiempoRegistro` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vmensaje`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vmensaje` (`Mensaje_id` INT, `Curso_id` INT, `UsuarioInstructor_id` INT, `UsuarioAlumno_id` INT, `imagenCurso` INT, `nombre` INT, `correo` INT, `nombreUsuario` INT, `UltimoMensaje` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vmensajedetalle`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vmensajedetalle` (`MensajeDetalle_id` INT, `Curso_id` INT, `Usuario_id` INT, `Mensaje_id` INT, `texto` INT, `tiempoRegistro` INT, `fotoPerfil` INT, `nombreUsuario` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vmetodopago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vmetodopago` (`MetodoPago_id` INT, `nombreMetodo` INT, `imagenMetodo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vmultimedia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vmultimedia` (`Multimedia_id` INT, `Nivel_id` INT, `multimedia` INT, `texto` INT, `tipoMultimedia` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vnivel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vnivel` (`Nivel_id` INT, `Curso_id` INT, `noNivel` INT, `nombre` INT, `costoNivel` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenerdetallecursoinstructor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenerdetallecursoinstructor` (`Curso_id` INT, `nombre` INT, `imagenCurso` INT, `Alumno` INT, `fotoPerfil` INT, `Progreso` INT, `totalPagado` INT, `nombreMetodo` INT, `tiempoRegistro` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenertodamultimediadeunnivel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenertodamultimediadeunnivel` (`Nivel_id` INT, `Multimedia_id` INT, `multimedia` INT, `texto` INT, `tipoMultimedia` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenertodascategoriadecurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenertodascategoriadecurso` (`CursoCategoria_id` INT, `Curso_id` INT, `Categoria_id` INT, `Usuario_id` INT, `nombre` INT, `descripcion` INT, `tiempoRegistro` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenertodosloscursosdeunacategoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenertodosloscursosdeunacategoria` (`nombreCompleto` INT, `Categoria_id` INT, `Curso_id` INT, `Usuario_id` INT, `noNiveles` INT, `costoCurso` INT, `noComentarios` INT, `noLikes` INT, `noDislikes` INT, `imagenCurso` INT, `nombre` INT, `descripcion` INT, `isBaja` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenertodosloscursosdeunusuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenertodosloscursosdeunusuario` (`Usuario_id` INT, `nombreCompleto` INT, `usuarioCurso_id` INT, `Curso_id` INT, `isFinalizado` INT, `nivelesCompletados` INT, `tiempoCompletado` INT, `costoCurso` INT, `noNiveles` INT, `imagenCurso` INT, `nombre` INT, `descripcion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncurso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncurso` (`Nivel_id` INT, `Curso_id` INT, `noNivel` INT, `nombre` INT, `costoNivel` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncursodeunusuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncursodeunusuario` (`Usuario_id` INT, `nivelCurso_id` INT, `MetodoPago_id` INT, `usuarioCurso_id` INT, `Nivel_id` INT, `isFinalizado` INT, `costoNivel` INT, `noNivel` INT, `nombre` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vobtenertotalgananciasreporteinstructor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vobtenertotalgananciasreporteinstructor` (`Usuario_id` INT, `nombreMetodo` INT, `imagenMetodo` INT, `totalIngresos` INT);

-- -----------------------------------------------------
-- Placeholder table for view `bdmm_proyecto`.`vusuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bdmm_proyecto`.`vusuario` (`Usuario_id` INT, `correo` INT, `userPassword` INT, `rolUsuario` INT, `fotoPerfil` INT, `descripcion` INT, `nombre` INT, `apellidoMaterno` INT, `apellidoPaterno` INT, `fechaNacimiento` INT, `sexo` INT, `fechaRegistro` INT, `ultimoCambio` INT, `esBloqueado` INT);

-- -----------------------------------------------------
-- function contarAlumnos
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `contarAlumnos`(p_idCurso INT ) RETURNS int
    READS SQL DATA
BEGIN
   DECLARE miNumeroAlumnos INT;
   SELECT COUNT(Usuario_id) INTO miNumeroAlumnos FROM usuarioCurso WHERE Curso_id = p_idCurso;
   SET miNumeroAlumnos= IFNULL(miNumeroAlumnos,0);
   RETURN miNumeroAlumnos;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function contarNiveles
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `contarNiveles`(p_idCurso INT ) RETURNS int
    READS SQL DATA
BEGIN
   DECLARE miNumeroNiveles INT;
   SELECT COUNT(Nivel_id) INTO miNumeroNiveles FROM Nivel WHERE Curso_id = p_idCurso;
   SET miNumeroNiveles= IFNULL(miNumeroNiveles,0);
   RETURN miNumeroNiveles;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function ingresosCurso
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `ingresosCurso`(p_idCurso INT ) RETURNS decimal(9,2)
    READS SQL DATA
BEGIN
   DECLARE miSuma DECIMAL(9,2);
   DECLARE miSumaTotalUsuarioCurso DECIMAL(9,2);
   DECLARE miSumaTotalUsuarioNivel DECIMAL(9,2);
   SELECT SUM(costoCurso) INTO miSumaTotalUsuarioCurso FROM usuarioCurso WHERE Curso_id = p_idCurso;
   SET miSumaTotalUsuarioCurso= IFNULL(miSumaTotalUsuarioCurso,0);
   
   SELECT SUM(A.costoNivel) INTO miSumaTotalUsuarioNivel FROM nivelCurso A
   LEFT JOIN usuarioCurso B 
   ON A.usuarioCurso_id = B.usuarioCurso_id
   WHERE B.Curso_id = p_idCurso;
   SET miSumaTotalUsuarioNivel= IFNULL(miSumaTotalUsuarioNivel,0);
   
   SET miSuma = miSumaTotalUsuarioCurso + miSumaTotalUsuarioNivel;
   RETURN miSuma;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function miNumeroAlumnos
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `miNumeroAlumnos`(p_idCurso INT ) RETURNS int
    READS SQL DATA
BEGIN
   DECLARE miNumeroAlumnos INT;
   SELECT COUNT(Usuario_id) INTO miNumeroAlumnos FROM usuarioCurso WHERE Curso_id = p_idCurso;
   SET miNumeroAlumnos= IFNULL(miNumeroAlumnos,0);
   RETURN miNumeroAlumnos;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function obtenerCostoCurso
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `obtenerCostoCurso`(p_idCurso INT ) RETURNS decimal(9,2)
    READS SQL DATA
BEGIN
   DECLARE miCostoCurso DECIMAL(9,2);
   SELECT costoCurso INTO miCostoCurso FROM Curso WHERE Curso_id = p_idCurso;
   SET miCostoCurso= IFNULL(miCostoCurso,0);
   RETURN miCostoCurso;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function obtenerCostoNivel
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `obtenerCostoNivel`(p_idNivel INT ) RETURNS decimal(9,2)
    READS SQL DATA
BEGIN
   DECLARE miCostoNivel DECIMAL(9,2);
   SELECT costoNivel INTO miCostoNivel FROM nivel WHERE Nivel_id = p_idNivel;
   SET miCostoNivel= IFNULL(miCostoNivel,0);
   RETURN miCostoNivel;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function promedioCurso
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `promedioCurso`(p_idCurso INT ) RETURNS int
    READS SQL DATA
BEGIN
   DECLARE miPromedio INT;
   SELECT AVG(nivelesCompletados) INTO miPromedio FROM usuarioCurso WHERE Curso_id = p_idCurso;
   SET miPromedio= IFNULL(miPromedio,0);
   RETURN miPromedio;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionCategoria
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionCategoria`(
	Operacion CHAR(1),
	sp_Categoria_id 		INT,
	sp_Usuario_id 			INT, 				
	sp_nombre 				VARCHAR(30),	
	sp_descripcion  		TINYTEXT	
)
BEGIN
   IF Operacion = 'I' /*INSERT CATEGORIA*/
   THEN  
		INSERT INTO Categoria(Usuario_id,nombre,descripcion,tiempoRegistro) 
			VALUES (sp_Usuario_id,sp_nombre,sp_descripcion,now());
   END IF;
	IF Operacion = 'E'  /*EDIT CATEGORIA*/
    THEN 
    	SET sp_nombre=IF(sp_nombre='',NULL,sp_nombre),
            sp_descripcion=IF(sp_descripcion='',NULL,sp_descripcion);
		UPDATE Categoria 
			SET nombre = IFNULL(sp_nombre,nombre), 
				descripcion= IFNULL(sp_descripcion,descripcion)
                
		WHERE Categoria_id = sp_Categoria_id;
   END IF;
    IF Operacion = 'D' THEN /*DELETE CATEGORIA*/
          DELETE FROM Categoria WHERE Categoria_id = sp_Categoria_id;
   END IF;
      IF Operacion = 'A' THEN /*GET ALL CATEGORIA*/
		SELECT Categoria_id, Usuario_id, nombre, descripcion, tiempoRegistro, noCursos
        FROM vCategoria;
   END IF;
     IF Operacion = 'G' THEN /*GET CURSO*/
		SELECT Categoria_id, Usuario_id, nombre, descripcion, tiempoRegistro, noCursos
        FROM vCategoria
		WHERE Categoria_id = sp_Categoria_id;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionComentario
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionComentario`(
	Operacion CHAR(1),
	sp_ComentarioCurso_id 	INT, 
    sp_Usuario_id 			INT,			
    sp_Curso_id 			INT,				
    sp_isLike 				BIT,			
    sp_texto  				TEXT		
)
BEGIN
  DECLARE isExistenteComentario INT;
   IF Operacion = 'I' /*INSERT COMENTARIO CURSO*/
   THEN  
		SELECT COUNT(ComentarioCurso_id) INTO isExistenteComentario FROM ComentarioCurso
		WHERE Curso_id = sp_Curso_id
		AND Usuario_id = sp_Usuario_id;
		IF isExistenteComentario = 0 THEN
			INSERT INTO ComentarioCurso(Usuario_id,Curso_id,isLike,texto,tiempoRegistro) 
				VALUES (sp_Usuario_id,sp_Curso_id,sp_isLike,sp_texto,now());
		END IF;
   END IF;

      IF Operacion = 'G' THEN /*GET ALL COMENTARIO CURSO*/
		SELECT nombreUsuario, fotoPerfil, ComentarioCurso_id, Usuario_id, Curso_id, isLike, texto, tiempoRegistro
        FROM vComentarioCurso
        WHERE Curso_id = sp_Curso_id;
   END IF;

      IF Operacion = 'E' THEN /*GET COMENTARIO ESTUDIANTE*/
		SELECT ComentarioCurso_id, Usuario_id, Curso_id, isLike, texto, tiempoRegistro
        FROM vComentarioCurso
        WHERE Curso_id = sp_Curso_id AND Usuario_id = sp_Usuario_id;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionCurso
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionCurso`(
	Operacion CHAR(1),
	sp_Curso_id 			INT, 
	sp_Usuario_id 			INT,			    			    
	sp_costoCurso  			DECIMAL(9,2),					    					    					    
	sp_imagenCurso			MEDIUMBLOB,
	sp_nombre 				VARCHAR(50), 			    
	sp_descripcion 			TEXT,		    
	sp_isBaja 				BIT			    
)
BEGIN
	DECLARE u_costoCurso DECIMAL(9,2);
   IF Operacion = 'I' /*INSERT CURSO*/
   THEN  
		INSERT INTO Curso(Usuario_id,costoCurso,imagenCurso,nombre,descripcion) 
			VALUES (sp_Usuario_id,sp_costoCurso,sp_imagenCurso,sp_nombre,sp_descripcion);
           SELECT Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, nombre, descripcion, isBaja
        FROM vCurso WHERE Curso_id = last_insert_id();
   END IF;
	IF Operacion = 'E'  /*EDIT CURSO*/
    THEN 
    	SET u_costoCurso = CONVERT(sp_costoCurso,DECIMAL(9,2));
    	SET sp_imagenCurso=IF(sp_imagenCurso='',NULL,sp_imagenCurso),
            sp_nombre=IF(sp_nombre='',NULL,sp_nombre),
            sp_descripcion=IF(sp_descripcion='',NULL,sp_descripcion);
		UPDATE Curso 
			SET costoCurso = IFNULL(u_costoCurso,costoCurso), 
				imagenCurso= IFNULL(sp_imagenCurso,imagenCurso),
				nombre= IFNULL(sp_nombre,nombre),
                descripcion= IFNULL(sp_descripcion,descripcion)
                
		WHERE Curso_id = sp_Curso_id;
   END IF;
    IF Operacion = 'D' THEN /*DELETE CURSO*/
          DELETE FROM Curso WHERE  Curso_id = sp_Curso_id;
   END IF;
       IF Operacion = 'B' THEN /*DAR DE BAJA CURSO*/
          UPDATE Curso SET isBaja = 1 WHERE Curso_id = sp_Curso_id;
   END IF;
       IF Operacion = 'T' THEN /*APROBAR CURSO*/
          UPDATE Curso SET isBorrador  = 0 WHERE Curso_id = sp_Curso_id;
   END IF;
      IF Operacion = 'A' THEN /*GET ALL CURSO*/
		SELECT Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, nombre, descripcion, isBaja
        FROM vCurso;
   END IF;
     IF Operacion = 'G' THEN /*GET CURSO*/
	SELECT Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, cursoNombre, descripcion, isBaja, categoriaNombre
        FROM vCursoInstructor
        WHERE  Curso_id = sp_Curso_id;
   END IF;
	IF Operacion = 'R' THEN /*GET REPORTE INSTRUCTOR BORRADORES*/
		SELECT Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, cursoNombre, descripcion, isBaja, CursoCategoria_id, categoriaNombre, Ingresos, Promedio, noAlumnos
        FROM vCursoInstructor
        WHERE Usuario_id = sp_Usuario_id AND isBorrador = 1 AND isBaja <> 1;
   END IF;
   	IF Operacion = 'U' THEN /*GET REPORTE INSTRUCTOR APROBADOS*/
		SELECT Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, cursoNombre, descripcion, isBaja, CursoCategoria_id, categoriaNombre, Ingresos, Promedio, noAlumnos
        FROM vCursoInstructor
        WHERE Usuario_id = sp_Usuario_id AND isBorrador = 0 AND isBaja <> 1;
   END IF;
   
      	IF Operacion = 'F' THEN /*GET REPORTE INSTRUCTOR BAJA*/
		SELECT Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, cursoNombre, descripcion, isBaja, CursoCategoria_id, categoriaNombre, Ingresos, Promedio, noAlumnos
        FROM vCursoInstructor
        WHERE Usuario_id = sp_Usuario_id AND isBorrador = 0 AND isBaja = 1;
   END IF;
      	IF Operacion = 'Q' THEN /*GET INGRESOS METODOS*/
		SELECT Usuario_id, nombreMetodo, imagenMetodo, totalIngresos
        FROM vObtenerTotalGananciasReporteInstructor
        WHERE Usuario_id = sp_Usuario_id;
   END IF;
        IF Operacion = 'X' THEN /*GET CURSO MEJOR CALIFICADO */
		SELECT nombreCompleto, Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, nombre, descripcion, isBaja
		FROM vCursosMejorCalificado
		WHERE isBaja <> 1 LIMIT 4;
   END IF;
        IF Operacion = 'Y' THEN /*GET CURSOS MAS VENDIDOS*/
		SELECT nombreCompleto, Curso_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, nombre, descripcion, isBaja, misCursosVendidos
        FROM vCursosMasVendido
		WHERE isBaja <> 1 LIMIT 4;
   END IF;
        IF Operacion = 'Z' THEN /*GET CURSOS MAS RECIENTES*/
		SELECT CONCAT(B.nombre,' ',apellidoPaterno,' ',apellidoMaterno) AS nombreCompleto, Curso_id, A.Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, A.nombre, A.descripcion, isBaja
        FROM vCurso A
        LEFT JOIN Usuario B
		ON A.Usuario_id= B.Usuario_id 
        WHERE isBaja <> 1 LIMIT 4;
   END IF;
	IF Operacion = 'S' THEN /*GET CURSOS SEARCH*/
		SELECT CONCAT(B.nombre,' ',apellidoPaterno,' ',apellidoMaterno) AS nombreCompleto, Curso_id, A.Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, A.nombre, A.descripcion, isBaja
        FROM vCurso A
        LEFT JOIN Usuario B
		ON A.Usuario_id= B.Usuario_id 
        WHERE isBaja <> 1 AND  (sp_nombre IS NULL OR A.nombre LIKE CONCAT("%",sp_nombre,"%")) LIMIT 20;
   END IF;
		IF Operacion = 'K' THEN /*GET KARDEX TODOS*/
		SELECT Usuario_id,isBaja, Curso_id, isFinalizado, imagenCurso, nombreCurso, Progreso, DATE(ultimoNivel) ultimoNivel, nombreCategoria, DATE(tiempoCompletado) tiempoCompletado,DATE(tiempoRegistro) tiempoRegistro
        FROM vKardex 
        WHERE Usuario_id = sp_Usuario_id;

   END IF;
   
   		IF Operacion = 'O' THEN /*GET KARDEX TODOS SEARCH*/
		SELECT Usuario_id,isBaja, Curso_id, isFinalizado, imagenCurso, nombreCurso, Progreso, DATE(ultimoNivel) ultimoNivel, nombreCategoria, DATE(tiempoCompletado) tiempoCompletado,DATE(tiempoRegistro) tiempoRegistro
        FROM vKardex 
        WHERE Usuario_id = sp_Usuario_id AND (sp_nombre IS NULL OR nombreCurso LIKE CONCAT("%",sp_nombre,"%"));

   END IF;
   
   	IF Operacion = 'N' THEN /*GET KARDEX ACTIVOS*/
		SELECT Usuario_id, Curso_id, isFinalizado, imagenCurso, nombreCurso, Progreso, DATE(ultimoNivel) ultimoNivel, nombreCategoria, DATE(tiempoCompletado) tiempoCompletado,DATE(tiempoRegistro) tiempoRegistro
        FROM vKardex 
        WHERE Usuario_id = sp_Usuario_id AND isBaja = 0;

   END IF;
      	IF Operacion = 'H' THEN /*GET KARDEX FINALIZADOS*/
		SELECT Usuario_id, Curso_id, isFinalizado, imagenCurso, nombreCurso, Progreso, DATE(ultimoNivel) ultimoNivel, nombreCategoria, DATE(tiempoCompletado) tiempoCompletado,DATE(tiempoRegistro) tiempoRegistro
        FROM vKardex 
        WHERE Usuario_id = sp_Usuario_id AND isFinalizado = 1;

   END IF;
   		IF Operacion = 'C' THEN /*GET DIPLOMA*/
		SELECT Usuario_id, Curso_id, Alumno, tiempoCompletado, Instructor, nombreCurso
        FROM vDiploma
        WHERE Usuario_id = sp_Usuario_id AND Curso_id = sp_Curso_id;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionCursoCategoria
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionCursoCategoria`(
	Operacion CHAR(1),
	sp_CursoCategoria_id 	INT,
    sp_Curso_id 			INT,				
    sp_Categoria_id 		INT 			
)
BEGIN
   IF Operacion = 'I' /*INSERT CURSO CATEGORIA*/
   THEN  
		INSERT INTO CursoCategoria(Curso_id,Categoria_id) 
			VALUES (sp_Curso_id,sp_Categoria_id);
   END IF;
    IF Operacion = 'D' THEN /*DELETE CURSO CATEGORIA*/
          DELETE FROM CursoCategoria WHERE CursoCategoria_id = sp_CursoCategoria_id;
   END IF;
      IF Operacion = 'A' THEN /*GET ALL  CATEGORIAS CURSO*/
		SELECT CursoCategoria_id, Curso_id, Categoria_id, Usuario_id, nombre, descripcion, tiempoRegistro
        FROM vObtenerTodasCategoriaDeCurso
		WHERE Curso_id = sp_Curso_id;
   END IF;
     IF Operacion = 'C' THEN /*GET ALL  CURSOS DE UNA CATEGORIA*/
	    SELECT nombreCompleto, Curso_id, Usuario_id, noNiveles, costoCurso, noComentarios, noLikes, noDislikes, imagenCurso, nombre, descripcion, isBaja
        FROM vObtenerTodosLosCursosDeUnaCategoria
		WHERE Categoria_id = sp_Categoria_id AND isBaja <> 1;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionMensaje
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionMensaje`(
	Operacion CHAR(1),
	sp_Mensaje_id 			 INT,
    sp_UsuarioInstructor_id  INT,			
    sp_UsuarioAlumno_id 	 INT,			
    sp_Curso_id 			 INT
)
BEGIN
  DECLARE isExistenteMensaje INT;
   IF Operacion = 'I' /*INSERT MENSAJE*/
   THEN  
   
		SELECT COUNT(Mensaje_id) INTO isExistenteMensaje FROM Mensaje
		WHERE UsuarioInstructor_id = sp_UsuarioInstructor_id
		AND UsuarioAlumno_id = sp_UsuarioAlumno_id
		AND Curso_id = sp_Curso_id;
		IF isExistenteMensaje = 0 THEN
			
			INSERT INTO Mensaje(UsuarioInstructor_id,UsuarioAlumno_id,Curso_id, UltimoMensaje) 
			VALUES (sp_UsuarioInstructor_id,sp_UsuarioAlumno_id,sp_Curso_id, now());
        END IF;
		
   END IF;
   IF Operacion = 'D' THEN /*DELETE MENSAJE*/
          DELETE FROM Mensaje WHERE Mensaje_id = sp_Mensaje_id;
   END IF;
   IF Operacion = 'X' THEN /*GET ALL MENSAJE HEADER INSTRUCTOR*/
          SELECT Mensaje_id, Curso_id, UsuarioInstructor_id, UsuarioAlumno_id, imagenCurso, nombre, correo, nombreUsuario FROM vMensaje
          WHERE UsuarioInstructor_id = sp_UsuarioInstructor_id
          ORDER BY UltimoMensaje DESC;
   END IF;
	IF Operacion = 'Z' THEN /*GET ALL MENSAJE HEADER ALUMNO*/
          SELECT Mensaje_id, Curso_id, UsuarioInstructor_id, UsuarioAlumno_id, imagenCurso, nombre, correo, nombreUsuario FROM vMensaje
          WHERE UsuarioAlumno_id = sp_UsuarioAlumno_id
           ORDER BY UltimoMensaje DESC;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionMensajeDetalle
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionMensajeDetalle`(
	Operacion CHAR(1),
	sp_MensajeDetalle_id 	 INT,		
    sp_Mensaje_id 			 INT,	
	sp_Usuario_id            INT,	
    sp_texto  				 TINYTEXT
)
BEGIN
   IF Operacion = 'I' /*INSERT MENSAJE DETALLE*/
   THEN  
		INSERT INTO MensajeDetalle(Mensaje_id,texto,Usuario_id,tiempoRegistro) 
			VALUES (sp_Mensaje_id,sp_texto,sp_Usuario_id,now());
		UPDATE Mensaje 
        SET UltimoMensaje = now() 
        WHERE Mensaje_id = sp_Mensaje_id;
   END IF;
   IF Operacion = 'G' THEN /*GET ALL MENSAJES*/
          SELECT MensajeDetalle_id,Curso_id, Usuario_id, Mensaje_id, texto, tiempoRegistro, fotoPerfil, nombreUsuario
          FROM vMensajeDetalle
          WHERE Mensaje_id = sp_Mensaje_id;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionMetodoPago
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionMetodoPago`(
	Operacion CHAR(1),
	sp_MetodoPago_id 		INT, 
	sp_nombreMetodo  		VARCHAR(30),		
	sp_imagenMetodo 		MEDIUMBLOB
)
BEGIN
   IF Operacion = 'I' /*INSERT METODO PAGO*/
   THEN  
		INSERT INTO MetodoPago(nombreMetodo,imagenMetodo) 
			VALUES (sp_nombreMetodo,sp_imagenMetodo);
   END IF;
	IF Operacion = 'E'  /*EDIT METODO PAGO*/
    THEN 

    	SET sp_nombreMetodo=IF(sp_nombreMetodo='',NULL,sp_nombreMetodo),
			sp_imagenMetodo=IF(sp_imagenMetodo='',NULL,sp_imagenMetodo);
		UPDATE MetodoPago 
			SET nombreMetodo = IFNULL(sp_nombreMetodo,nombreMetodo), 
				imagenMetodo= IFNULL(sp_imagenMetodo,imagenMetodo)
     
		WHERE MetodoPago_id = sp_MetodoPago_id;
   END IF;
    IF Operacion = 'D' THEN /*DELETE METODO PAGO*/
          DELETE FROM MetodoPago WHERE  MetodoPago_id = sp_MetodoPago_id;
   END IF;
      IF Operacion = 'A' THEN /*GET ALL METODOS PAGO*/
		SELECT MetodoPago_id, nombreMetodo, imagenMetodo
        FROM vMetodoPago;
   END IF;
     IF Operacion = 'G' THEN /*GET METODO PAGO*/
		SELECT MetodoPago_id, nombreMetodo, imagenMetodo
        FROM vMetodoPago
        WHERE MetodoPago_id = sp_MetodoPago_id;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionMultimedia
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionMultimedia`(
	Operacion CHAR(1),
	sp_Multimedia_id 		INT,
    sp_Nivel_id 			INT,				
    sp_multimedia  			LONGBLOB, 					
    sp_texto 				TEXT, 						
    sp_tipoMultimedia 		TINYINT			
)
BEGIN
   IF Operacion = 'I' /*INSERT MULTIMEDIA*/
   THEN  
		INSERT INTO Multimedia(Nivel_id,multimedia,texto,tipoMultimedia) 
			VALUES (sp_Nivel_id,sp_multimedia,sp_texto,sp_tipoMultimedia);
   END IF;
	IF Operacion = 'E' /*ACTUALIZAR MULTIMEDIA*/
   THEN  
		SET sp_multimedia=IF(sp_multimedia='',NULL,sp_multimedia),
            sp_texto=IF(sp_texto='',NULL,sp_texto),
            sp_tipoMultimedia=IF(sp_tipoMultimedia='',NULL,sp_tipoMultimedia);
		UPDATE Multimedia 
			SET multimedia = IFNULL(sp_multimedia,multimedia), 
                texto = IFNULL(sp_texto,texto),
                tipoMultimedia = IFNULL(sp_tipoMultimedia,tipoMultimedia)
		WHERE Multimedia_id = sp_Multimedia_id;
        SELECT Nivel_id FROM Multimedia WHERE Multimedia_id = sp_Multimedia_id;
        
   END IF;
    IF Operacion = 'D' THEN /*DELETE MULTIMEDIA*/
		  SELECT Nivel_id FROM Multimedia WHERE Multimedia_id = sp_Multimedia_id;
          DELETE FROM Multimedia WHERE Multimedia_id = sp_Multimedia_id;
        
   END IF;
   
      IF Operacion = 'A' THEN /*GET ALL MULTIMEDIA DEL NIVEL*/
		SELECT Multimedia_id, multimedia, texto, tipoMultimedia
        FROM vObtenerTodaMultimediaDeUnNivel
        WHERE Nivel_id = sp_Nivel_id;
   END IF;
   
	  IF Operacion = 'G' THEN /*GET DATA MULTIMEDIA*/
		SELECT Multimedia_id, Nivel_id, multimedia, texto, tipoMultimedia
        FROM vMultimedia
        WHERE Multimedia_id = sp_Multimedia_id;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionNivel
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionNivel`(
	Operacion CHAR(1),
	sp_Nivel_id 			INT,
    sp_Curso_id 			INT,				       			
    sp_nombre  				VARCHAR(50),		
    sp_costoNivel  			DECIMAL(9,2)
)
BEGIN
	DECLARE u_costoNivel DECIMAL(9,2);
    DECLARE u_MisNiveles INT;
	DECLARE u_MiCurso INT;
   IF Operacion = 'I' /*INSERT NIVEL*/
   THEN  
		SET u_MisNiveles = contarNiveles(sp_Curso_id) + 1;
		INSERT INTO Nivel(Curso_id,noNivel,nombre,costoNivel) 
			VALUES (sp_Curso_id,u_MisNiveles,sp_nombre,sp_costoNivel);
		SELECT Nivel_id,Curso_id
        FROM vNivel WHERE Nivel_id = last_insert_id();
	
   END IF;
   	IF Operacion = 'E'  /*EDIT NIVEL*/
    THEN 
		SET u_costoNivel = CONVERT(sp_costoNivel,DECIMAL(9,2));
    	SET sp_nombre=IF(sp_nombre='',NULL,sp_nombre);
		UPDATE Nivel 
			SET nombre = IFNULL(sp_nombre,nombre), 
                costoNivel = IFNULL(u_costoNivel,costoNivel)
                
		WHERE Nivel_id = sp_Nivel_id;
   END IF;
    IF Operacion = 'D' THEN /*DELETE NIVEL*/
          SELECT noNivel INTO u_MisNiveles FROM Nivel WHERE Nivel_id = sp_Nivel_id;
          SELECT Curso_id INTO u_MiCurso FROM Nivel WHERE Nivel_id = sp_Nivel_id;
		  UPDATE Nivel SET noNivel = noNivel - 1 WHERE noNivel > u_MisNiveles AND Curso_id = u_MiCurso;
          DELETE FROM Nivel WHERE Nivel_id = sp_Nivel_id;
   END IF;
    IF Operacion = 'A' THEN /*GET ALL NIVELES DEL CURSO*/
		SELECT Nivel_id, Curso_id, noNivel, nombre AS nombreNivel, costoNivel, (SELECT COUNT(*) FROM nivelCurso A 
        WHERE A.Nivel_id = B.Nivel_id AND A.Usuario_id = sp_Nivel_id) AS isComprado
        FROM vObtenerTodosLosNivelesDeUnCurso B
        WHERE Curso_id = sp_Curso_id;
   END IF;
       IF Operacion = 'G' THEN /*GET DATA NIVEL*/
		SELECT Nivel_id, Curso_id, noNivel, nombre, costoNivel
        FROM vNivel
        WHERE Nivel_id = sp_Nivel_id;
   END IF;
   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionNivelCurso
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionNivelCurso`(
	Operacion CHAR(1),
	sp_nivelCurso_id 			INT,
	sp_MetodoPago_id 			INT,
    sp_Usuario_id				INT,
    sp_Nivel_id 				INT
)
BEGIN
	DECLARE isExistenteUsuarioNivel INT;
    DECLARE isExistenteUsuarioCurso INT;
    DECLARE idCurso_Nivel_id INT;
    DECLARE idUsuarioCurso INT;
   IF Operacion = 'I' /*INSERT USUARIO NIVEL*/
   THEN  
		SELECT A.Curso_id INTO idCurso_Nivel_id
				FROM Curso A
				JOIN Nivel B ON A.curso_id = B.Curso_id
                WHERE Nivel_id = sp_Nivel_id;
		SELECT COUNT(nivelCurso_id) INTO isExistenteUsuarioNivel FROM nivelCurso
        WHERE Nivel_id = sp_Nivel_id
		AND Usuario_id = sp_Usuario_id;
		SELECT COUNT(usuarioCurso_id) INTO isExistenteUsuarioCurso FROM usuarioCurso
         WHERE Curso_id = idCurso_Nivel_id
		AND Usuario_id = sp_Usuario_id;
        IF isExistenteUsuarioNivel = 0 THEN
			IF isExistenteUsuarioCurso = 0 THEN
            	INSERT INTO usuarioCurso(MetodoPago_id,Curso_id,Usuario_id,tiempoRegistro,costoCurso) 
					VALUES (sp_MetodoPago_id,idCurso_Nivel_id,sp_Usuario_id,NOW(),0);
                    
				INSERT INTO nivelCurso(MetodoPago_id, usuarioCurso_id,Usuario_id, Nivel_id, tiempoRegistro, costoNivel) 
					VALUES (sp_MetodoPago_id, LAST_INSERT_ID(),sp_Usuario_id, sp_Nivel_id, NOW(), obtenerCostoNivel(sp_Nivel_id));
			ELSEIF isExistenteUsuarioCurso >= 1 THEN
				SELECT A.usuarioCurso_id INTO idUsuarioCurso
				FROM usuarioCurso A
				JOIN Curso B ON A.Curso_id = B.Curso_id
                WHERE A.Curso_id = idCurso_Nivel_id 
                AND A.Usuario_id = sp_Usuario_id;
				INSERT INTO nivelCurso(MetodoPago_id, usuarioCurso_id,Usuario_id, Nivel_id, tiempoRegistro, costoNivel) 
					VALUES (sp_MetodoPago_id, idUsuarioCurso,sp_Usuario_id, sp_Nivel_id, NOW(), obtenerCostoNivel(sp_Nivel_id));
			END IF;
		END IF;
   END IF;
   IF Operacion = 'G' /*GET USUARIO NIVELES CURSO*/
   THEN  
		SELECT Usuario_id, nivelCurso_id, MetodoPago_id, usuarioCurso_id, Nivel_id, isFinalizado, costoNivel, noNivel, nombre
        FROM vObtenerTodosLosNivelesDeUnCursoDeUnUsuario
        WHERE usuarioCurso_id = sp_usuarioCurso_id;
   END IF;
      IF Operacion = 'E' /*GET USUARIO NIVELES CURSO*/
   THEN  
		UPDATE nivelCurso SET isFinalizado = 1
        WHERE Nivel_id = sp_Nivel_id AND Usuario_id = sp_Usuario_id AND isFinalizado = 0;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionUsuario`(
	Operacion 			CHAR(1),
	sp_Usuario_id 		INT,
	sp_correo 			VARCHAR(40),
	sp_userPassword 	VARCHAR(30),
	sp_rolUsuario 		TINYINT,
	sp_fotoPerfil 		MEDIUMBLOB,
	sp_descripcion 		TEXT, 
	sp_nombre 			VARCHAR(50),
	sp_apellidoPaterno  VARCHAR(30),
	sp_apellidoMaterno  VARCHAR(30),
	sp_fechaNacimiento 	VARCHAR(30),
	sp_sexo 			VARCHAR(10),
	sp_esBloqueado 		BIT
)
BEGIN
	DECLARE sp_ultimoCambio DATETIME; 
   IF Operacion = 'I' /*INSERT USUARIO*/
   THEN  
		INSERT INTO Usuario(correo ,userPassword ,rolUsuario ,fotoPerfil ,nombre ,apellidoMaterno ,apellidoPaterno ,fechaNacimiento ,sexo,fechaRegistro, ultimoCambio) 
			VALUES (sp_correo,sp_userPassword,sp_rolUsuario,sp_fotoPerfil,sp_nombre ,sp_apellidoMaterno,sp_apellidoPaterno,sp_fechaNacimiento,sp_sexo,now(), now());
   END IF;
	IF Operacion = 'E'  /*EDIT USUARIO*/
    
    THEN 
		SET sp_ultimoCambio = now();
    	SET sp_correo=IF(sp_correo='',NULL,sp_correo),
			sp_userPassword=IF(sp_userPassword='',NULL,sp_userPassword),
			sp_rolUsuario=IF(sp_rolUsuario='',NULL,sp_rolUsuario),
            sp_fotoPerfil=IF(sp_fotoPerfil='',NULL,sp_fotoPerfil),
			sp_nombre=IF(sp_nombre='',NULL,sp_nombre),
            sp_sexo=IF(sp_sexo='',NULL,sp_sexo),
            sp_descripcion=IF(sp_descripcion='',NULL,sp_descripcion),
			sp_apellidoMaterno=IF(sp_apellidoMaterno='',NULL,sp_apellidoMaterno),
            sp_apellidoPaterno=IF(sp_apellidoPaterno='',NULL,sp_apellidoPaterno),
            sp_fechaNacimiento=IF(sp_fechaNacimiento='',NULL,sp_fechaNacimiento);
		UPDATE Usuario 
			SET correo = IFNULL(sp_correo,correo), 
				userPassword= IFNULL(sp_userPassword,userPassword), 
				descripcion=  IFNULL(sp_descripcion,descripcion), 
				rolUsuario= IFNULL(sp_rolUsuario,rolUsuario), 
				fotoPerfil= IFNULL(sp_fotoPerfil,fotoPerfil), 
				nombre= IFNULL(sp_nombre,nombre), 
				apellidoMaterno= IFNULL(sp_apellidoMaterno,apellidoMaterno),
				apellidoPaterno= IFNULL(sp_apellidoPaterno,apellidoPaterno),
				fechaNacimiento= IFNULL(sp_fechaNacimiento,fechaNacimiento),
                sexo= IFNULL(sp_sexo,sexo), 
				ultimoCambio= IFNULL(sp_ultimoCambio,ultimoCambio)
     
		WHERE Usuario_id=sp_Usuario_id;
   END IF;
    IF Operacion = 'D' THEN /*DELETE USUARIO*/
          DELETE FROM Usuario WHERE  Usuario_id = sp_Usuario_id;
   END IF;
      IF Operacion = 'P' THEN /*BLOQUEAR/DESBLOQUEAR USUARIO*/
          UPDATE Usuario SET esBloqueado = 1 WHERE correo = sp_correo;
   END IF;
     IF Operacion = 'T' THEN /*BLOQUEAR/DESBLOQUEAR USUARIO*/
          UPDATE Usuario SET esBloqueado = 0 WHERE Usuario_id= sp_Usuario_id;
   END IF;
    IF Operacion = 'L' THEN /*LOG IN USUARIO*/
		SELECT Usuario_id, rolUsuario
        FROM vUsuario
        WHERE 1=1 
			AND correo = sp_correo
            AND userPassword = sp_userPassword
            AND esBloqueado = 0;
   END IF;
      IF Operacion = 'B' THEN /*GET DATOS ALL USUARIOS BLOQUEADOS*/
		SELECT Usuario_id, correo, rolUsuario, fotoPerfil, descripcion, nombre, apellidoMaterno, apellidoPaterno, fechaNacimiento, sexo, ultimoCambio
        FROM vUsuario
        WHERE esBloqueado = 1;
   END IF;
     IF Operacion = 'G' THEN /*GET DATOS USUARIO*/
		SELECT Usuario_id, correo, rolUsuario, fotoPerfil, descripcion, nombre, apellidoMaterno, apellidoPaterno, fechaNacimiento, sexo
        FROM vUsuario
        WHERE Usuario_id = sp_Usuario_id;
   END IF;
        IF Operacion = 'X' THEN /*GET DATOS INSTRUCTOR*/
		SELECT Usuario_id,correo, fotoPerfil, descripcion, CONCAT(nombre,' ',apellidoMaterno,' ',apellidoPaterno) nombre
        FROM vUsuario
        WHERE Usuario_id = sp_Usuario_id AND rolUsuario = 2;
   END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sp_GestionUsuarioCurso
-- -----------------------------------------------------

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GestionUsuarioCurso`(
	Operacion CHAR(1),
	sp_usuarioCurso_id 			INT,
    sp_MetodoPago_id 			INT,				
    sp_Curso_id 				INT, 					
    sp_Usuario_id 				INT
)
BEGIN
  DECLARE isExistenteUsuarioCurso INT;
  DECLARE cantidadNivelesComprados INT;
   IF Operacion = 'I' /*INSERT USUARIO CURSO*/
   THEN  
   
		SELECT COUNT(usuarioCurso_id) INTO isExistenteUsuarioCurso FROM usuarioCurso
        WHERE Curso_id = sp_Curso_id
		AND Usuario_id = sp_Usuario_id;
        	IF isExistenteUsuarioCurso = 0 THEN
		INSERT INTO usuarioCurso(MetodoPago_id,Curso_id,Usuario_id,tiempoRegistro,costoCurso) 
			VALUES (sp_MetodoPago_id,sp_Curso_id, sp_Usuario_id,now(),obtenerCostoCurso(sp_Curso_id));
            ELSE
				
			INSERT INTO nivelCurso (MetodoPago_id, usuarioCurso_id, Usuario_id, Nivel_id, tiempoRegistro, costoNivel)
			SELECT sp_MetodoPago_id, B.usuarioCurso_id, sp_Usuario_id, A.Nivel_id, NOW(), A.costoNivel
			FROM nivel A
			CROSS JOIN usuarioCurso B
			WHERE A.curso_id = sp_Curso_id
				AND B.Curso_id = sp_Curso_id
				AND B.Usuario_id = sp_Usuario_id
			AND NOT EXISTS (
				SELECT 1
				FROM nivelCurso A2
				WHERE A2.Usuario_id = sp_Usuario_id
				AND A2.Nivel_id = A.Nivel_id
				);
            END IF;
   END IF;
   IF Operacion = 'G' /*GET USUARIO CURSOS*/
   THEN  
		SELECT Usuario_id, nombreCompleto, usuarioCurso_id, Curso_id, isFinalizado, nivelesCompletados, tiempoCompletado, costoCurso, noNiveles, imagenCurso, nombre, descripcion
        FROM vObtenerTodosLosCursosDeUnUsuario
        WHERE Usuario_id = sp_Usuario_id;
   END IF;
      IF Operacion = 'T' /*GET REPORTE CURSO DETALLE*/
   THEN  
		SELECT Curso_id, nombre, imagenCurso, Alumno, fotoPerfil, Progreso, totalPagado, nombreMetodo, tiempoRegistro
        FROM vObtenerDetalleCursoInstructor
        WHERE Curso_id = sp_Curso_id;
   END IF;
   
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vcategoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vcategoria`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vcategoria` AS select `a`.`Categoria_id` AS `Categoria_id`,`a`.`Usuario_id` AS `Usuario_id`,`a`.`nombre` AS `nombre`,`a`.`descripcion` AS `descripcion`,`a`.`tiempoRegistro` AS `tiempoRegistro`,count(`b`.`Curso_id`) AS `noCursos` from (`bdmm_proyecto`.`categoria` `a` left join `bdmm_proyecto`.`cursocategoria` `b` on((`a`.`Categoria_id` = `b`.`Categoria_id`))) group by `a`.`Categoria_id`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vcomentariocurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vcomentariocurso`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vcomentariocurso` AS select concat(`b`.`nombre`,' ',`b`.`apellidoPaterno`,' ',`b`.`apellidoMaterno`) AS `nombreUsuario`,`b`.`fotoPerfil` AS `fotoPerfil`,`a`.`ComentarioCurso_id` AS `ComentarioCurso_id`,`a`.`Usuario_id` AS `Usuario_id`,`a`.`Curso_id` AS `Curso_id`,`a`.`isLike` AS `isLike`,`a`.`texto` AS `texto`,`a`.`tiempoRegistro` AS `tiempoRegistro` from (`bdmm_proyecto`.`comentariocurso` `a` left join `bdmm_proyecto`.`usuario` `b` on((`b`.`Usuario_id` = `a`.`Usuario_id`)));

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vcurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vcurso`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vcurso` AS select `bdmm_proyecto`.`curso`.`Curso_id` AS `Curso_id`,`bdmm_proyecto`.`curso`.`Usuario_id` AS `Usuario_id`,`bdmm_proyecto`.`curso`.`noNiveles` AS `noNiveles`,`bdmm_proyecto`.`curso`.`costoCurso` AS `costoCurso`,`bdmm_proyecto`.`curso`.`noComentarios` AS `noComentarios`,`bdmm_proyecto`.`curso`.`noLikes` AS `noLikes`,`bdmm_proyecto`.`curso`.`noDislikes` AS `noDislikes`,`bdmm_proyecto`.`curso`.`imagenCurso` AS `imagenCurso`,`bdmm_proyecto`.`curso`.`nombre` AS `nombre`,`bdmm_proyecto`.`curso`.`descripcion` AS `descripcion`,`bdmm_proyecto`.`curso`.`isBaja` AS `isBaja`,`bdmm_proyecto`.`curso`.`isBorrador` AS `isBorrador` from `bdmm_proyecto`.`curso` where (`bdmm_proyecto`.`curso`.`isBorrador` <> 1);

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vcursoinstructor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vcursoinstructor`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vcursoinstructor` AS select `a`.`Curso_id` AS `Curso_id`,`a`.`isBorrador` AS `isBorrador`,`a`.`Usuario_id` AS `Usuario_id`,`a`.`noNiveles` AS `noNiveles`,`a`.`costoCurso` AS `costoCurso`,`a`.`noComentarios` AS `noComentarios`,`a`.`noLikes` AS `noLikes`,`a`.`noDislikes` AS `noDislikes`,`a`.`imagenCurso` AS `imagenCurso`,`a`.`nombre` AS `cursoNombre`,`a`.`descripcion` AS `descripcion`,`a`.`isBaja` AS `isBaja`,`b`.`CursoCategoria_id` AS `CursoCategoria_id`,`c`.`nombre` AS `categoriaNombre`,`ingresosCurso`(`a`.`Curso_id`) AS `Ingresos`,`promedioCurso`(`a`.`Curso_id`) AS `Promedio`,`contarAlumnos`(`a`.`Curso_id`) AS `noAlumnos` from (((`bdmm_proyecto`.`curso` `a` left join (select `bdmm_proyecto`.`cursocategoria`.`Curso_id` AS `Curso_id`,max(`bdmm_proyecto`.`cursocategoria`.`CursoCategoria_id`) AS `maxCategoriaId` from `bdmm_proyecto`.`cursocategoria` group by `bdmm_proyecto`.`cursocategoria`.`Curso_id`) `ultimacategoria` on((`a`.`Curso_id` = `ultimacategoria`.`Curso_id`))) left join `bdmm_proyecto`.`cursocategoria` `b` on((`ultimacategoria`.`maxCategoriaId` = `b`.`CursoCategoria_id`))) left join `bdmm_proyecto`.`categoria` `c` on((`b`.`Categoria_id` = `c`.`Categoria_id`))) group by `a`.`Curso_id`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vcursosmasvendido`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vcursosmasvendido`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vcursosmasvendido` AS select concat(`c`.`nombre`,' ',`c`.`apellidoPaterno`,' ',`c`.`apellidoMaterno`) AS `nombreCompleto`,`a`.`Curso_id` AS `Curso_id`,`a`.`noNiveles` AS `noNiveles`,`a`.`costoCurso` AS `costoCurso`,`a`.`noComentarios` AS `noComentarios`,`a`.`noLikes` AS `noLikes`,`a`.`noDislikes` AS `noDislikes`,`a`.`imagenCurso` AS `imagenCurso`,`a`.`nombre` AS `nombre`,`a`.`descripcion` AS `descripcion`,`a`.`isBaja` AS `isBaja`,count(`b`.`Curso_id`) AS `misCursosVendidos` from ((`bdmm_proyecto`.`curso` `a` left join `bdmm_proyecto`.`usuariocurso` `b` on((`a`.`Curso_id` = `b`.`Curso_id`))) left join `bdmm_proyecto`.`usuario` `c` on((`a`.`Usuario_id` = `c`.`Usuario_id`))) where (`a`.`isBorrador` <> 1) group by `a`.`Curso_id` order by `misCursosVendidos`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vcursosmejorcalificado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vcursosmejorcalificado`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vcursosmejorcalificado` AS select concat(`b`.`nombre`,' ',`b`.`apellidoPaterno`,' ',`b`.`apellidoMaterno`) AS `nombreCompleto`,`bdmm_proyecto`.`a`.`Curso_id` AS `Curso_id`,`bdmm_proyecto`.`a`.`Usuario_id` AS `Usuario_id`,`bdmm_proyecto`.`a`.`noNiveles` AS `noNiveles`,`bdmm_proyecto`.`a`.`costoCurso` AS `costoCurso`,`bdmm_proyecto`.`a`.`noComentarios` AS `noComentarios`,`bdmm_proyecto`.`a`.`noLikes` AS `noLikes`,`bdmm_proyecto`.`a`.`noDislikes` AS `noDislikes`,`bdmm_proyecto`.`a`.`imagenCurso` AS `imagenCurso`,`bdmm_proyecto`.`a`.`nombre` AS `nombre`,`bdmm_proyecto`.`a`.`descripcion` AS `descripcion`,`bdmm_proyecto`.`a`.`isBaja` AS `isBaja` from (`bdmm_proyecto`.`vcurso` `a` left join `bdmm_proyecto`.`usuario` `b` on((`bdmm_proyecto`.`a`.`Usuario_id` = `b`.`Usuario_id`))) where ((`bdmm_proyecto`.`a`.`noLikes` >= `bdmm_proyecto`.`a`.`noDislikes`) and (`bdmm_proyecto`.`a`.`isBorrador` <> 1)) order by `bdmm_proyecto`.`a`.`noLikes` desc;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vdiploma`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vdiploma`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vdiploma` AS select `b`.`Usuario_id` AS `Usuario_id`,`b`.`Curso_id` AS `Curso_id`,concat(`a`.`nombre`,' ',`a`.`apellidoPaterno`,' ',`a`.`apellidoMaterno`) AS `Alumno`,`b`.`tiempoCompletado` AS `tiempoCompletado`,concat(`d`.`nombre`,' ',`d`.`apellidoPaterno`,' ',`d`.`apellidoMaterno`) AS `Instructor`,`c`.`nombre` AS `nombreCurso` from (((`bdmm_proyecto`.`usuario` `a` left join `bdmm_proyecto`.`usuariocurso` `b` on((`a`.`Usuario_id` = `b`.`Usuario_id`))) join `bdmm_proyecto`.`curso` `c` on((`b`.`Curso_id` = `c`.`Curso_id`))) left join `bdmm_proyecto`.`usuario` `d` on((`c`.`Usuario_id` = `d`.`Usuario_id`))) where ((`c`.`isBorrador` <> 1) and (`b`.`isFinalizado` = 1));

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vkardex`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vkardex`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vkardex` AS select `a`.`Usuario_id` AS `Usuario_id`,`b`.`Curso_id` AS `Curso_id`,`b`.`isFinalizado` AS `isFinalizado`,`c`.`isBaja` AS `isBaja`,`c`.`imagenCurso` AS `imagenCurso`,`c`.`isBorrador` AS `isBorrador`,`c`.`nombre` AS `nombreCurso`,concat(`b`.`nivelesCompletados`,'/',`c`.`noNiveles`) AS `Progreso`,`d`.`tiempoRegistro` AS `ultimoNivel`,`f`.`nombre` AS `nombreCategoria`,`b`.`tiempoCompletado` AS `tiempoCompletado`,`b`.`tiempoRegistro` AS `tiempoRegistro` from (((((`bdmm_proyecto`.`usuario` `a` join `bdmm_proyecto`.`usuariocurso` `b` on((`a`.`Usuario_id` = `b`.`Usuario_id`))) join `bdmm_proyecto`.`curso` `c` on((`b`.`Curso_id` = `c`.`Curso_id`))) join `bdmm_proyecto`.`nivelcurso` `d` on((`b`.`usuarioCurso_id` = `d`.`usuarioCurso_id`))) join `bdmm_proyecto`.`cursocategoria` `e` on((`e`.`Curso_id` = `c`.`Curso_id`))) join `bdmm_proyecto`.`categoria` `f` on((`e`.`Categoria_id` = `f`.`Categoria_id`))) group by `a`.`Usuario_id`,`b`.`Curso_id`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vmensaje`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vmensaje`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vmensaje` AS select `a`.`Mensaje_id` AS `Mensaje_id`,`a`.`Curso_id` AS `Curso_id`,`a`.`UsuarioInstructor_id` AS `UsuarioInstructor_id`,`a`.`UsuarioAlumno_id` AS `UsuarioAlumno_id`,`b`.`imagenCurso` AS `imagenCurso`,`b`.`nombre` AS `nombre`,`c`.`correo` AS `correo`,concat(`c`.`nombre`,' ',`c`.`apellidoPaterno`,' ',`c`.`apellidoMaterno`) AS `nombreUsuario`,`a`.`UltimoMensaje` AS `UltimoMensaje` from ((`bdmm_proyecto`.`mensaje` `a` left join `bdmm_proyecto`.`curso` `b` on((`a`.`Curso_id` = `b`.`Curso_id`))) left join `bdmm_proyecto`.`usuario` `c` on((`c`.`Usuario_id` = `a`.`UsuarioInstructor_id`)));

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vmensajedetalle`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vmensajedetalle`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vmensajedetalle` AS select `a`.`MensajeDetalle_id` AS `MensajeDetalle_id`,`b`.`Curso_id` AS `Curso_id`,`c`.`Usuario_id` AS `Usuario_id`,`a`.`Mensaje_id` AS `Mensaje_id`,`a`.`texto` AS `texto`,`a`.`tiempoRegistro` AS `tiempoRegistro`,`c`.`fotoPerfil` AS `fotoPerfil`,concat(`c`.`nombre`,' ',`c`.`apellidoPaterno`,' ',`c`.`apellidoMaterno`) AS `nombreUsuario` from ((`bdmm_proyecto`.`mensajedetalle` `a` left join `bdmm_proyecto`.`usuario` `c` on((`c`.`Usuario_id` = `a`.`Usuario_id`))) left join `bdmm_proyecto`.`mensaje` `b` on((`b`.`Mensaje_id` = `a`.`Mensaje_id`))) order by `a`.`tiempoRegistro` desc;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vmetodopago`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vmetodopago`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vmetodopago` AS select `bdmm_proyecto`.`metodopago`.`MetodoPago_id` AS `MetodoPago_id`,`bdmm_proyecto`.`metodopago`.`nombreMetodo` AS `nombreMetodo`,`bdmm_proyecto`.`metodopago`.`imagenMetodo` AS `imagenMetodo` from `bdmm_proyecto`.`metodopago`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vmultimedia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vmultimedia`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vmultimedia` AS select `bdmm_proyecto`.`multimedia`.`Multimedia_id` AS `Multimedia_id`,`bdmm_proyecto`.`multimedia`.`Nivel_id` AS `Nivel_id`,`bdmm_proyecto`.`multimedia`.`multimedia` AS `multimedia`,`bdmm_proyecto`.`multimedia`.`texto` AS `texto`,`bdmm_proyecto`.`multimedia`.`tipoMultimedia` AS `tipoMultimedia` from `bdmm_proyecto`.`multimedia`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vnivel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vnivel`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vnivel` AS select `bdmm_proyecto`.`nivel`.`Nivel_id` AS `Nivel_id`,`bdmm_proyecto`.`nivel`.`Curso_id` AS `Curso_id`,`bdmm_proyecto`.`nivel`.`noNivel` AS `noNivel`,`bdmm_proyecto`.`nivel`.`nombre` AS `nombre`,`bdmm_proyecto`.`nivel`.`costoNivel` AS `costoNivel` from `bdmm_proyecto`.`nivel`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenerdetallecursoinstructor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenerdetallecursoinstructor`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenerdetallecursoinstructor` AS select `c`.`Curso_id` AS `Curso_id`,`c`.`nombre` AS `nombre`,`c`.`imagenCurso` AS `imagenCurso`,concat(`a`.`nombre`,' ',`a`.`apellidoPaterno`,' ',`a`.`apellidoMaterno`) AS `Alumno`,`a`.`fotoPerfil` AS `fotoPerfil`,concat(`uc`.`nivelesCompletados`,'/',`c`.`noNiveles`) AS `Progreso`,((select sum(`bdmm_proyecto`.`usuariocurso`.`costoCurso`) from `bdmm_proyecto`.`usuariocurso` where ((`bdmm_proyecto`.`usuariocurso`.`Usuario_id` = `a`.`Usuario_id`) and (`bdmm_proyecto`.`usuariocurso`.`Curso_id` = `c`.`Curso_id`))) + (select sum(`bdmm_proyecto`.`nivelcurso`.`costoNivel`) from `bdmm_proyecto`.`nivelcurso` where ((`bdmm_proyecto`.`nivelcurso`.`Usuario_id` = `a`.`Usuario_id`) and (`bdmm_proyecto`.`nivelcurso`.`usuarioCurso_id` = `uc`.`usuarioCurso_id`)))) AS `totalPagado`,`m`.`nombreMetodo` AS `nombreMetodo`,`uc`.`tiempoRegistro` AS `tiempoRegistro` from ((((`bdmm_proyecto`.`usuario` `a` join `bdmm_proyecto`.`usuariocurso` `uc` on((`a`.`Usuario_id` = `uc`.`Usuario_id`))) join `bdmm_proyecto`.`curso` `c` on((`uc`.`Curso_id` = `c`.`Curso_id`))) join `bdmm_proyecto`.`nivelcurso` `n` on((`uc`.`usuarioCurso_id` = `n`.`usuarioCurso_id`))) join `bdmm_proyecto`.`metodopago` `m` on((`m`.`MetodoPago_id` = `n`.`MetodoPago_id`))) group by `c`.`Curso_id`,`uc`.`Usuario_id` order by count(`n`.`MetodoPago_id`) desc;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenertodamultimediadeunnivel`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenertodamultimediadeunnivel`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenertodamultimediadeunnivel` AS select `a`.`Nivel_id` AS `Nivel_id`,`b`.`Multimedia_id` AS `Multimedia_id`,`b`.`multimedia` AS `multimedia`,`b`.`texto` AS `texto`,`b`.`tipoMultimedia` AS `tipoMultimedia` from (`bdmm_proyecto`.`nivel` `a` left join `bdmm_proyecto`.`multimedia` `b` on((`a`.`Nivel_id` = `b`.`Nivel_id`)));

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenertodascategoriadecurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenertodascategoriadecurso`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenertodascategoriadecurso` AS select `a`.`CursoCategoria_id` AS `CursoCategoria_id`,`a`.`Curso_id` AS `Curso_id`,`a`.`Categoria_id` AS `Categoria_id`,`b`.`Usuario_id` AS `Usuario_id`,`b`.`nombre` AS `nombre`,`b`.`descripcion` AS `descripcion`,`b`.`tiempoRegistro` AS `tiempoRegistro` from (`bdmm_proyecto`.`cursocategoria` `a` left join `bdmm_proyecto`.`categoria` `b` on((`a`.`Categoria_id` = `b`.`Categoria_id`)));

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenertodosloscursosdeunacategoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenertodosloscursosdeunacategoria`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenertodosloscursosdeunacategoria` AS select concat(`c`.`nombre`,' ',`c`.`apellidoPaterno`,' ',`c`.`apellidoMaterno`) AS `nombreCompleto`,`a`.`Categoria_id` AS `Categoria_id`,`b`.`Curso_id` AS `Curso_id`,`b`.`Usuario_id` AS `Usuario_id`,`b`.`noNiveles` AS `noNiveles`,`b`.`costoCurso` AS `costoCurso`,`b`.`noComentarios` AS `noComentarios`,`b`.`noLikes` AS `noLikes`,`b`.`noDislikes` AS `noDislikes`,`b`.`imagenCurso` AS `imagenCurso`,`b`.`nombre` AS `nombre`,`b`.`descripcion` AS `descripcion`,`b`.`isBaja` AS `isBaja` from ((`bdmm_proyecto`.`cursocategoria` `a` left join `bdmm_proyecto`.`curso` `b` on((`a`.`Curso_id` = `b`.`Curso_id`))) left join `bdmm_proyecto`.`usuario` `c` on((`c`.`Usuario_id` = `b`.`Usuario_id`)));

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenertodosloscursosdeunusuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenertodosloscursosdeunusuario`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenertodosloscursosdeunusuario` AS select `b`.`Usuario_id` AS `Usuario_id`,concat(`a`.`nombre`,' ',`a`.`apellidoPaterno`,' ',`a`.`apellidoMaterno`) AS `nombreCompleto`,`b`.`usuarioCurso_id` AS `usuarioCurso_id`,`b`.`Curso_id` AS `Curso_id`,`b`.`isFinalizado` AS `isFinalizado`,`b`.`nivelesCompletados` AS `nivelesCompletados`,`b`.`tiempoCompletado` AS `tiempoCompletado`,`b`.`costoCurso` AS `costoCurso`,`c`.`noNiveles` AS `noNiveles`,`c`.`imagenCurso` AS `imagenCurso`,`c`.`nombre` AS `nombre`,`c`.`descripcion` AS `descripcion` from ((`bdmm_proyecto`.`usuario` `a` join `bdmm_proyecto`.`usuariocurso` `b` on((`a`.`Usuario_id` = `b`.`Usuario_id`))) join `bdmm_proyecto`.`curso` `c` on((`b`.`Curso_id` = `c`.`Curso_id`))) group by `b`.`Curso_id`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncurso`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncurso`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncurso` AS select `bdmm_proyecto`.`nivel`.`Nivel_id` AS `Nivel_id`,`bdmm_proyecto`.`nivel`.`Curso_id` AS `Curso_id`,`bdmm_proyecto`.`nivel`.`noNivel` AS `noNivel`,`bdmm_proyecto`.`nivel`.`nombre` AS `nombre`,`bdmm_proyecto`.`nivel`.`costoNivel` AS `costoNivel` from `bdmm_proyecto`.`nivel`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncursodeunusuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncursodeunusuario`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenertodoslosnivelesdeuncursodeunusuario` AS select `a`.`Usuario_id` AS `Usuario_id`,`c`.`nivelCurso_id` AS `nivelCurso_id`,`c`.`MetodoPago_id` AS `MetodoPago_id`,`c`.`usuarioCurso_id` AS `usuarioCurso_id`,`c`.`Nivel_id` AS `Nivel_id`,`c`.`isFinalizado` AS `isFinalizado`,`c`.`costoNivel` AS `costoNivel`,`d`.`noNivel` AS `noNivel`,`d`.`nombre` AS `nombre` from (((`bdmm_proyecto`.`usuario` `a` left join `bdmm_proyecto`.`usuariocurso` `b` on((`a`.`Usuario_id` = `b`.`Usuario_id`))) left join `bdmm_proyecto`.`nivelcurso` `c` on((`b`.`usuarioCurso_id` = `c`.`usuarioCurso_id`))) left join `bdmm_proyecto`.`nivel` `d` on((`c`.`Nivel_id` = `d`.`Nivel_id`))) group by `c`.`nivelCurso_id`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vobtenertotalgananciasreporteinstructor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vobtenertotalgananciasreporteinstructor`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vobtenertotalgananciasreporteinstructor` AS select `a`.`Usuario_id` AS `Usuario_id`,`e`.`nombreMetodo` AS `nombreMetodo`,`e`.`imagenMetodo` AS `imagenMetodo`,((select sum(`bdmm_proyecto`.`usuariocurso`.`costoCurso`) from `bdmm_proyecto`.`usuariocurso` where (`bdmm_proyecto`.`usuariocurso`.`MetodoPago_id` = `e`.`MetodoPago_id`)) + (select sum(`bdmm_proyecto`.`nivelcurso`.`costoNivel`) from `bdmm_proyecto`.`nivelcurso` where (`bdmm_proyecto`.`nivelcurso`.`MetodoPago_id` = `e`.`MetodoPago_id`))) AS `totalIngresos` from ((((`bdmm_proyecto`.`usuario` `a` join `bdmm_proyecto`.`curso` `b` on((`a`.`Usuario_id` = `b`.`Usuario_id`))) left join `bdmm_proyecto`.`usuariocurso` `c` on((`c`.`Curso_id` = `b`.`Curso_id`))) left join `bdmm_proyecto`.`nivelcurso` `d` on((`d`.`usuarioCurso_id` = `c`.`usuarioCurso_id`))) join `bdmm_proyecto`.`metodopago` `e` on((`e`.`MetodoPago_id` = `d`.`MetodoPago_id`))) group by `e`.`MetodoPago_id`;

-- -----------------------------------------------------
-- View `bdmm_proyecto`.`vusuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `bdmm_proyecto`.`vusuario`;
USE `bdmm_proyecto`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `bdmm_proyecto`.`vusuario` AS select `bdmm_proyecto`.`usuario`.`Usuario_id` AS `Usuario_id`,`bdmm_proyecto`.`usuario`.`correo` AS `correo`,`bdmm_proyecto`.`usuario`.`userPassword` AS `userPassword`,`bdmm_proyecto`.`usuario`.`rolUsuario` AS `rolUsuario`,`bdmm_proyecto`.`usuario`.`fotoPerfil` AS `fotoPerfil`,`bdmm_proyecto`.`usuario`.`descripcion` AS `descripcion`,`bdmm_proyecto`.`usuario`.`nombre` AS `nombre`,`bdmm_proyecto`.`usuario`.`apellidoMaterno` AS `apellidoMaterno`,`bdmm_proyecto`.`usuario`.`apellidoPaterno` AS `apellidoPaterno`,`bdmm_proyecto`.`usuario`.`fechaNacimiento` AS `fechaNacimiento`,`bdmm_proyecto`.`usuario`.`sexo` AS `sexo`,`bdmm_proyecto`.`usuario`.`fechaRegistro` AS `fechaRegistro`,`bdmm_proyecto`.`usuario`.`ultimoCambio` AS `ultimoCambio`,`bdmm_proyecto`.`usuario`.`esBloqueado` AS `esBloqueado` from `bdmm_proyecto`.`usuario`;
USE `bdmm_proyecto`;

DELIMITER $$
USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_DeleteCategoria`
BEFORE DELETE ON `bdmm_proyecto`.`categoria`
FOR EACH ROW
BEGIN
   DELETE FROM CategoriaProducto
    WHERE CategoriaProducto.Categoria_id= OLD.Categoria_id;

END$$

USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_aumentarComentarios`
AFTER INSERT ON `bdmm_proyecto`.`comentariocurso`
FOR EACH ROW
BEGIN
   UPDATE Curso 
   SET noComentarios = noComentarios + 1 
   WHERE Curso.Curso_id = NEW.Curso_id;
   
   UPDATE Curso 
   SET noLikes = noLikes + 1 
   WHERE Curso.Curso_id = NEW.Curso_id AND NEW.isLike = 1;
   
   UPDATE Curso 
   SET noDislikes = noDislikes + 1 
   WHERE Curso.Curso_id = NEW.Curso_id AND NEW.isLike = 0;
END$$

USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_DeleteMetodoPago`
BEFORE DELETE ON `bdmm_proyecto`.`metodopago`
FOR EACH ROW
BEGIN
   DELETE FROM nivelCurso
    WHERE nivelCurso.MetodoPago_id= OLD.MetodoPago_id;
     DELETE FROM usuarioCurso
    WHERE usuarioCurso.MetodoPago_id= OLD.MetodoPago_id;
    UPDATE Usuario SET MetodoPago_id = NULL WHERE Usuario.MetodoPago_id= OLD.MetodoPago_id;

END$$

USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_DeleteNivel`
BEFORE DELETE ON `bdmm_proyecto`.`nivel`
FOR EACH ROW
BEGIN
	DELETE FROM Multimedia
	WHERE Multimedia.Nivel_id= OLD.Nivel_id;
END$$

USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_aumentarNivelesCurso`
AFTER INSERT ON `bdmm_proyecto`.`nivel`
FOR EACH ROW
BEGIN
   UPDATE Curso 
   SET noNiveles = noNiveles + 1 
   WHERE Curso.Curso_id= NEW.Curso_id;
END$$

USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_reducirNivelesCurso`
AFTER DELETE ON `bdmm_proyecto`.`nivel`
FOR EACH ROW
BEGIN
   UPDATE Curso 
   SET noNiveles = (SELECT COUNT(Nivel_id) FROM Nivel WHERE Nivel.Curso_id = OLD.Curso_id)
   WHERE Curso.Curso_id= OLD.Curso_id;
END$$

USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_insertarNiveles`
AFTER INSERT ON `bdmm_proyecto`.`usuariocurso`
FOR EACH ROW
BEGIN
	
	INSERT INTO nivelCurso (MetodoPago_id, usuarioCurso_id, Usuario_id, Nivel_id, tiempoRegistro, costoNivel)
	SELECT NEW.MetodoPago_id, NEW.usuarioCurso_id, NEW.Usuario_id, B.nivel_id, NOW(), 0
	FROM Nivel B
	WHERE B.curso_id = NEW.curso_id AND NEW.costoCurso <> 0
	AND NOT EXISTS (
    SELECT 1
    FROM nivelCurso A
    WHERE A.Usuario_id = NEW.Usuario_id
    AND A.Nivel_id = B.nivel_id
);
END$$

USE `bdmm_proyecto`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `bdmm_proyecto`.`trigger_aumentarNivelesCompletados`
AFTER UPDATE ON `bdmm_proyecto`.`nivelcurso`
FOR EACH ROW
BEGIN
   UPDATE usuarioCurso 
   SET nivelesCompletados = nivelesCompletados + 1 
   WHERE usuarioCurso.usuarioCurso_id= OLD.usuarioCurso_id AND OLD.isFinalizado <> NEW.isFinalizado;
   
    UPDATE usuarioCurso 
   SET isFinalizado = 1, tiempoCompletado = NOW() 
   WHERE usuarioCurso.usuarioCurso_id = OLD.usuarioCurso_id 
     AND usuarioCurso.nivelesCompletados = (SELECT noNiveles FROM Curso WHERE Curso.Curso_id = usuarioCurso.Curso_id);
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
